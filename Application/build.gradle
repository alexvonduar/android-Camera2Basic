
buildscript {
    repositories {
        jcenter()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.1'
    }
}

apply plugin: 'com.android.application'

repositories {
    jcenter()
    google()
}

dependencies {
    compile 'com.android.support:support-v4:27.0.2'
    compile 'com.android.support:support-v13:27.0.2'
    compile 'com.android.support:cardview-v7:27.0.2'
    compile 'com.android.support:appcompat-v7:27.0.2'
    compile fileTree(dir: 'libs', include: ['*.so'])
}

// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
    'main',     // main sample code; look here for the interesting stuff.
    'common',   // components that are reused by multiple samples
    'template'] // boilerplate code that is generated by the sample template process

android {
    signingConfigs {
        config {
            keyAlias 'mykey'
            keyPassword 'Cds!23'
            storeFile file('/home/alex/android.jks')
            storePassword 'Cds!23'
        }
    }
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 27
        //ndk.abiFilters 'arm64-v8a', 'armeabi-v7a'
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions -std=c++11 -fopenmp"
                arguments "-DANDROID_ARM_NEON=TRUE",
                          "-DANDROID_TOOLCHAIN=gcc"
            }
        }
        signingConfig signingConfigs.config
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    sourceSets {
        main {
            //jniLibs.srcDir 'libs'
            //jni.srcDirs = []
            jniLibs.srcDirs = ["../jpeg/libs"]
            dirs.each { dir ->
                java.srcDirs "src/${dir}/java"
                res.srcDirs "src/${dir}/res"
            }
        }
        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']

    }
    //splits {
    //
    //    // Configures multiple APKs based on ABI.
    //    abi {
    //
    //        // Enables building multiple APKs per ABI.
    //        enable true
    //
    //        // By default all ABIs are included, so use reset() and include to specify that we only
    //        // want APKs for x86, armeabi-v7a, and mips.
    //
    //        // Resets the list of ABIs that Gradle should create APKs for to none.
    //        reset()
    //
    //        // Specifies a list of ABIs that Gradle should create APKs for.
    //        include "arm64-v8a", "armeabi-v7a"
    //
    //        // Specifies that we do not want to also generate a universal APK that includes all ABIs.
    //        universalApk false
    //    }
    //}
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    /*
    flavorDimensions 'abi'
    productFlavors {
        armeabiv7a {
            // Assigns this product flavor to the 'version' flavor dimension.
            dimension 'abi'
            ndk.abiFilters 'armeabi-v7a'
            sourceSets {
                main {
                    //jniLibs.srcDir 'libs'
                    //jni.srcDirs = ['../opencv/']
                    // let gradle pack the shared library into apk
                    jniLibs.srcDirs = ['../opencv/armeabi-v7a/sdk/native/libs', "../jpeg/libs"]
                }
            }
            minSdkVersion 22
            signingConfig signingConfigs.config
            targetSdkVersion 22
        }
        arm64v8a {
            dimension 'abi'
            ndk.abiFilters 'arm64-v8a'
            sourceSets {
                main {
                    //jniLibs.srcDir 'libs'
                    //jni.srcDirs = ['../opencv/']
                    // let gradle pack the shared library into apk
                    jniLibs.srcDirs = ['../opencv/arm64-v8a/sdk/native/libs', "../jpeg/libs"]
                }
            }
            minSdkVersion 22
            signingConfig signingConfigs.config
            targetSdkVersion 22
        }
    }
    */
    buildTypes {
        debug {
            ndk {
                abiFilters "arm64-v8a", "armeabi-v7a"
            }
        }
        release {
            signingConfig signingConfigs.config
            ndk {
                abiFilters "arm64-v8a", "armeabi-v7a"
            }
        }
    }
}
